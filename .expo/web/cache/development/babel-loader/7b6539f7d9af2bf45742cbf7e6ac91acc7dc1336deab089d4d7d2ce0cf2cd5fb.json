{"ast":null,"code":"'use strict';\n\nimport { useEffect, useRef } from 'react';\nimport { makeMutable, subscribeForKeyboardEvents, unsubscribeFromKeyboardEvents } from \"../core.js\";\nimport { KeyboardState } from \"../commonTypes.js\";\nexport function useAnimatedKeyboard() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isStatusBarTranslucentAndroid: false,\n    isNavigationBarTranslucentAndroid: false\n  };\n  var ref = useRef(null);\n  var listenerId = useRef(-1);\n  var isSubscribed = useRef(false);\n  if (ref.current === null) {\n    var keyboardEventData = {\n      state: makeMutable(KeyboardState.UNKNOWN),\n      height: makeMutable(0)\n    };\n    listenerId.current = subscribeForKeyboardEvents(function (state, height) {\n      'worklet';\n\n      keyboardEventData.state.value = state;\n      keyboardEventData.height.value = height;\n    }, options);\n    ref.current = keyboardEventData;\n    isSubscribed.current = true;\n  }\n  useEffect(function () {\n    if (isSubscribed.current === false && ref.current !== null) {\n      var _keyboardEventData = ref.current;\n      listenerId.current = subscribeForKeyboardEvents(function (state, height) {\n        'worklet';\n\n        _keyboardEventData.state.value = state;\n        _keyboardEventData.height.value = height;\n      }, options);\n      isSubscribed.current = true;\n    }\n    return function () {\n      unsubscribeFromKeyboardEvents(listenerId.current);\n      isSubscribed.current = false;\n    };\n  }, []);\n  return ref.current;\n}","map":{"version":3,"names":["useEffect","useRef","makeMutable","subscribeForKeyboardEvents","unsubscribeFromKeyboardEvents","KeyboardState","useAnimatedKeyboard","options","arguments","length","undefined","isStatusBarTranslucentAndroid","isNavigationBarTranslucentAndroid","ref","listenerId","isSubscribed","current","keyboardEventData","state","UNKNOWN","height","value"],"sources":["C:\\Proyek PAWM\\g-lingua-mobile\\node_modules\\react-native-reanimated\\src\\hook\\useAnimatedKeyboard.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport {\n  makeMutable,\n  subscribeForKeyboardEvents,\n  unsubscribeFromKeyboardEvents,\n} from '../core';\nimport type {\n  AnimatedKeyboardInfo,\n  AnimatedKeyboardOptions,\n} from '../commonTypes';\nimport { KeyboardState } from '../commonTypes';\n\n/**\n * Lets you synchronously get the position and state of the keyboard.\n *\n * @param options - An additional keyboard configuration options.\n * @returns An object with the current keyboard `height` and `state` as [shared\n *   values](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value).\n * @see https://docs.swmansion.com/react-native-reanimated/docs/device/useAnimatedKeyboard\n */\nexport function useAnimatedKeyboard(\n  options: AnimatedKeyboardOptions = {\n    isStatusBarTranslucentAndroid: false,\n    isNavigationBarTranslucentAndroid: false,\n  }\n): AnimatedKeyboardInfo {\n  const ref = useRef<AnimatedKeyboardInfo | null>(null);\n  const listenerId = useRef<number>(-1);\n  const isSubscribed = useRef<boolean>(false);\n\n  if (ref.current === null) {\n    const keyboardEventData: AnimatedKeyboardInfo = {\n      state: makeMutable<KeyboardState>(KeyboardState.UNKNOWN),\n      height: makeMutable(0),\n    };\n    listenerId.current = subscribeForKeyboardEvents((state, height) => {\n      'worklet';\n      keyboardEventData.state.value = state;\n      keyboardEventData.height.value = height;\n    }, options);\n    ref.current = keyboardEventData;\n    isSubscribed.current = true;\n  }\n  useEffect(() => {\n    if (isSubscribed.current === false && ref.current !== null) {\n      const keyboardEventData = ref.current;\n      // subscribe again after Fast Refresh\n      listenerId.current = subscribeForKeyboardEvents((state, height) => {\n        'worklet';\n        keyboardEventData.state.value = state;\n        keyboardEventData.height.value = height;\n      }, options);\n      isSubscribed.current = true;\n    }\n    return () => {\n      unsubscribeFromKeyboardEvents(listenerId.current);\n      isSubscribed.current = false;\n    };\n  }, []);\n  return ref.current;\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SACEC,WAAW,EACXC,0BAA0B,EAC1BC,6BAA6B;AAM/B,SAASC,aAAa;AAUtB,OAAO,SAASC,mBAAmBA,CAAA,EAKX;EAAA,IAJtBC,OAAgC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;IACjCG,6BAA6B,EAAE,KAAK;IACpCC,iCAAiC,EAAE;EACrC,CAAC;EAED,IAAMC,GAAG,GAAGZ,MAAM,CAA8B,IAAI,CAAC;EACrD,IAAMa,UAAU,GAAGb,MAAM,CAAS,CAAC,CAAC,CAAC;EACrC,IAAMc,YAAY,GAAGd,MAAM,CAAU,KAAK,CAAC;EAE3C,IAAIY,GAAG,CAACG,OAAO,KAAK,IAAI,EAAE;IACxB,IAAMC,iBAAuC,GAAG;MAC9CC,KAAK,EAAEhB,WAAW,CAAgBG,aAAa,CAACc,OAAO,CAAC;MACxDC,MAAM,EAAElB,WAAW,CAAC,CAAC;IACvB,CAAC;IACDY,UAAU,CAACE,OAAO,GAAGb,0BAA0B,CAAC,UAACe,KAAK,EAAEE,MAAM,EAAK;MACjE,SAAS;;MACTH,iBAAiB,CAACC,KAAK,CAACG,KAAK,GAAGH,KAAK;MACrCD,iBAAiB,CAACG,MAAM,CAACC,KAAK,GAAGD,MAAM;IACzC,CAAC,EAAEb,OAAO,CAAC;IACXM,GAAG,CAACG,OAAO,GAAGC,iBAAiB;IAC/BF,YAAY,CAACC,OAAO,GAAG,IAAI;EAC7B;EACAhB,SAAS,CAAC,YAAM;IACd,IAAIe,YAAY,CAACC,OAAO,KAAK,KAAK,IAAIH,GAAG,CAACG,OAAO,KAAK,IAAI,EAAE;MAC1D,IAAMC,kBAAiB,GAAGJ,GAAG,CAACG,OAAO;MAErCF,UAAU,CAACE,OAAO,GAAGb,0BAA0B,CAAC,UAACe,KAAK,EAAEE,MAAM,EAAK;QACjE,SAAS;;QACTH,kBAAiB,CAACC,KAAK,CAACG,KAAK,GAAGH,KAAK;QACrCD,kBAAiB,CAACG,MAAM,CAACC,KAAK,GAAGD,MAAM;MACzC,CAAC,EAAEb,OAAO,CAAC;MACXQ,YAAY,CAACC,OAAO,GAAG,IAAI;IAC7B;IACA,OAAO,YAAM;MACXZ,6BAA6B,CAACU,UAAU,CAACE,OAAO,CAAC;MACjDD,YAAY,CAACC,OAAO,GAAG,KAAK;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,OAAOH,GAAG,CAACG,OAAO;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}