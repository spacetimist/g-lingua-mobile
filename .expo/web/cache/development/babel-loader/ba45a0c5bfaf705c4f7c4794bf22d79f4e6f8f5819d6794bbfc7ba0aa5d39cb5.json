{"ast":null,"code":"'use strict';\n\nimport { useRef } from 'react';\nimport { useSharedValue } from \"./useSharedValue.js\";\nimport { getShadowNodeWrapperFromRef } from \"../fabricUtils\";\nimport { makeShareableCloneRecursive } from \"../shareables.js\";\nimport { shareableMappingCache } from \"../shareableMappingCache.js\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { findNodeHandle } from \"../platformFunctions/findNodeHandle\";\nimport { isFabric, isWeb } from \"../PlatformChecker.js\";\nvar IS_WEB = isWeb();\nfunction getComponentOrScrollable(component) {\n  if (isFabric() && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!isFabric() && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n  return component;\n}\nexport function useAnimatedRef() {\n  var tag = useSharedValue(-1);\n  var viewName = useSharedValue(null);\n  var ref = useRef();\n  if (!ref.current) {\n    var _fun = function fun(component) {\n      if (component) {\n        var getTagValueFunction = isFabric() ? getShadowNodeWrapperFromRef : findNodeHandle;\n        var getTagOrShadowNodeWrapper = function getTagOrShadowNodeWrapper() {\n          return IS_WEB ? getComponentOrScrollable(component) : getTagValueFunction(getComponentOrScrollable(component));\n        };\n        tag.value = getTagOrShadowNodeWrapper();\n        _fun.getTag = isFabric() ? function () {\n          return findNodeHandle(getComponentOrScrollable(component));\n        } : getTagOrShadowNodeWrapper;\n        _fun.current = component;\n        if (Platform.OS === 'ios' && !isFabric()) {\n          var _component$viewConfig;\n          viewName.value = (component == null ? void 0 : (_component$viewConfig = component.viewConfig) == null ? void 0 : _component$viewConfig.uiViewClassName) || 'RCTView';\n        }\n      }\n      return tag.value;\n    };\n    _fun.current = null;\n    var animatedRefShareableHandle = makeShareableCloneRecursive({\n      __init: function __init() {\n        'worklet';\n\n        var f = function f() {\n          return tag.value;\n        };\n        f.viewName = viewName;\n        return f;\n      }\n    });\n    shareableMappingCache.set(_fun, animatedRefShareableHandle);\n    ref.current = _fun;\n  }\n  return ref.current;\n}","map":{"version":3,"names":["useRef","useSharedValue","getShadowNodeWrapperFromRef","makeShareableCloneRecursive","shareableMappingCache","Platform","findNodeHandle","isFabric","isWeb","IS_WEB","getComponentOrScrollable","component","getNativeScrollRef","getScrollableNode","useAnimatedRef","tag","viewName","ref","current","fun","getTagValueFunction","getTagOrShadowNodeWrapper","value","getTag","OS","_component$viewConfig","viewConfig","uiViewClassName","animatedRefShareableHandle","__init","f","set"],"sources":["C:\\Proyek PAWM\\g-lingua-mobile\\node_modules\\react-native-reanimated\\src\\hook\\useAnimatedRef.ts"],"sourcesContent":["'use strict';\nimport type { Component } from 'react';\nimport { useRef } from 'react';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedRef, AnimatedRefOnUI } from './commonTypes';\nimport type { ShadowNodeWrapper } from '../commonTypes';\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport { makeShareableCloneRecursive } from '../shareables';\nimport { shareableMappingCache } from '../shareableMappingCache';\nimport { Platform } from 'react-native';\nimport { findNodeHandle } from '../platformFunctions/findNodeHandle';\nimport type { ScrollView, FlatList } from 'react-native';\nimport { isFabric, isWeb } from '../PlatformChecker';\n\nconst IS_WEB = isWeb();\n\ninterface MaybeScrollableComponent extends Component {\n  getNativeScrollRef?: FlatList['getNativeScrollRef'];\n  getScrollableNode?:\n    | ScrollView['getScrollableNode']\n    | FlatList['getScrollableNode'];\n  viewConfig?: {\n    uiViewClassName?: string;\n  };\n}\n\nfunction getComponentOrScrollable(component: MaybeScrollableComponent) {\n  if (isFabric() && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!isFabric() && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n  return component;\n}\n\n/**\n * Lets you get a reference of a view that you can use inside a worklet.\n *\n * @returns An object with a `.current` property which contains an instance of a\n *   component.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef\n */\nexport function useAnimatedRef<\n  TComponent extends Component,\n>(): AnimatedRef<TComponent> {\n  const tag = useSharedValue<number | ShadowNodeWrapper | null>(-1);\n  const viewName = useSharedValue<string | null>(null);\n\n  const ref = useRef<AnimatedRef<TComponent>>();\n\n  if (!ref.current) {\n    const fun: AnimatedRef<TComponent> = <AnimatedRef<TComponent>>((\n      component\n    ) => {\n      // enters when ref is set by attaching to a component\n      if (component) {\n        const getTagValueFunction = isFabric()\n          ? getShadowNodeWrapperFromRef\n          : findNodeHandle;\n\n        const getTagOrShadowNodeWrapper = () => {\n          return IS_WEB\n            ? getComponentOrScrollable(component)\n            : getTagValueFunction(getComponentOrScrollable(component));\n        };\n\n        tag.value = getTagOrShadowNodeWrapper();\n\n        // On Fabric we have to unwrap the tag from the shadow node wrapper\n        fun.getTag = isFabric()\n          ? () => findNodeHandle(getComponentOrScrollable(component))\n          : getTagOrShadowNodeWrapper;\n\n        fun.current = component;\n        // viewName is required only on iOS with Paper\n        if (Platform.OS === 'ios' && !isFabric()) {\n          viewName.value =\n            (component as MaybeScrollableComponent)?.viewConfig\n              ?.uiViewClassName || 'RCTView';\n        }\n      }\n      return tag.value;\n    });\n\n    fun.current = null;\n\n    const animatedRefShareableHandle = makeShareableCloneRecursive({\n      __init: () => {\n        'worklet';\n        const f: AnimatedRefOnUI = () => tag.value;\n        f.viewName = viewName;\n        return f;\n      },\n    });\n    shareableMappingCache.set(fun, animatedRefShareableHandle);\n    ref.current = fun;\n  }\n\n  return ref.current;\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,cAAc;AAGvB,SAASC,2BAA2B;AACpC,SAASC,2BAA2B;AACpC,SAASC,qBAAqB;AAAkC,OAAAC,QAAA;AAEhE,SAASC,cAAc;AAEvB,SAASC,QAAQ,EAAEC,KAAK;AAExB,IAAMC,MAAM,GAAGD,KAAK,CAAC,CAAC;AAYtB,SAASE,wBAAwBA,CAACC,SAAmC,EAAE;EACrE,IAAIJ,QAAQ,CAAC,CAAC,IAAII,SAAS,CAACC,kBAAkB,EAAE;IAC9C,OAAOD,SAAS,CAACC,kBAAkB,CAAC,CAAC;EACvC,CAAC,MAAM,IAAI,CAACL,QAAQ,CAAC,CAAC,IAAII,SAAS,CAACE,iBAAiB,EAAE;IACrD,OAAOF,SAAS,CAACE,iBAAiB,CAAC,CAAC;EACtC;EACA,OAAOF,SAAS;AAClB;AASA,OAAO,SAASG,cAAcA,CAAA,EAED;EAC3B,IAAMC,GAAG,GAAGd,cAAc,CAAoC,CAAC,CAAC,CAAC;EACjE,IAAMe,QAAQ,GAAGf,cAAc,CAAgB,IAAI,CAAC;EAEpD,IAAMgB,GAAG,GAAGjB,MAAM,CAA0B,CAAC;EAE7C,IAAI,CAACiB,GAAG,CAACC,OAAO,EAAE;IAChB,IAAMC,IAA4B,GAChC,SADIA,GAA4BA,CAChCR,SAAS,EACN;MAEH,IAAIA,SAAS,EAAE;QACb,IAAMS,mBAAmB,GAAGb,QAAQ,CAAC,CAAC,GAClCL,2BAA2B,GAC3BI,cAAc;QAElB,IAAMe,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAA,EAAS;UACtC,OAAOZ,MAAM,GACTC,wBAAwB,CAACC,SAAS,CAAC,GACnCS,mBAAmB,CAACV,wBAAwB,CAACC,SAAS,CAAC,CAAC;QAC9D,CAAC;QAEDI,GAAG,CAACO,KAAK,GAAGD,yBAAyB,CAAC,CAAC;QAGvCF,IAAG,CAACI,MAAM,GAAGhB,QAAQ,CAAC,CAAC,GACnB;UAAA,OAAMD,cAAc,CAACI,wBAAwB,CAACC,SAAS,CAAC,CAAC;QAAA,IACzDU,yBAAyB;QAE7BF,IAAG,CAACD,OAAO,GAAGP,SAAS;QAEvB,IAAIN,QAAQ,CAACmB,EAAE,KAAK,KAAK,IAAI,CAACjB,QAAQ,CAAC,CAAC,EAAE;UAAA,IAAAkB,qBAAA;UACxCT,QAAQ,CAACM,KAAK,GACX,CAAAX,SAAS,qBAAAc,qBAAA,GAATd,SAAS,CAA+Be,UAAU,qBAAlDD,qBAAA,CACGE,eAAe,KAAI,SAAS;QACpC;MACF;MACA,OAAOZ,GAAG,CAACO,KAAK;IAClB,CAAE;IAEFH,IAAG,CAACD,OAAO,GAAG,IAAI;IAElB,IAAMU,0BAA0B,GAAGzB,2BAA2B,CAAC;MAC7D0B,MAAM,EAAE,SAARA,MAAMA,CAAA,EAAQ;QACZ,SAAS;;QACT,IAAMC,CAAkB,GAAG,SAArBA,CAAkBA,CAAA;UAAA,OAASf,GAAG,CAACO,KAAK;QAAA;QAC1CQ,CAAC,CAACd,QAAQ,GAAGA,QAAQ;QACrB,OAAOc,CAAC;MACV;IACF,CAAC,CAAC;IACF1B,qBAAqB,CAAC2B,GAAG,CAACZ,IAAG,EAAES,0BAA0B,CAAC;IAC1DX,GAAG,CAACC,OAAO,GAAGC,IAAG;EACnB;EAEA,OAAOF,GAAG,CAACC,OAAO;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}