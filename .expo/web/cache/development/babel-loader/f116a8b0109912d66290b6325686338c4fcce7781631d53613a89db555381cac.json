{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { runOnUIImmediately } from \"../../threads.js\";\nimport { registerEventHandler, unregisterEventHandler } from \"../../core.js\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { isJest, shouldBeUseWeb } from \"../../PlatformChecker.js\";\nimport { ReanimatedError } from \"../../errors.js\";\nvar IS_ANDROID = Platform.OS === 'android';\nexport var ProgressTransitionManager = function () {\n  function ProgressTransitionManager() {\n    _classCallCheck(this, ProgressTransitionManager);\n    this._sharedElementCount = 0;\n    this._eventHandler = {\n      isRegistered: false,\n      onTransitionProgress: -1,\n      onAppear: -1,\n      onDisappear: -1,\n      onSwipeDismiss: -1\n    };\n  }\n  return _createClass(ProgressTransitionManager, [{\n    key: \"addProgressAnimation\",\n    value: function addProgressAnimation(viewTag, progressAnimation) {\n      runOnUIImmediately(function () {\n        'worklet';\n\n        global.ProgressTransitionRegister.addProgressAnimation(viewTag, progressAnimation);\n      })();\n      this.registerEventHandlers();\n    }\n  }, {\n    key: \"removeProgressAnimation\",\n    value: function removeProgressAnimation(viewTag) {\n      var isUnmounting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.unregisterEventHandlers();\n      runOnUIImmediately(function () {\n        'worklet';\n\n        global.ProgressTransitionRegister.removeProgressAnimation(viewTag, isUnmounting);\n      })();\n    }\n  }, {\n    key: \"registerEventHandlers\",\n    value: function registerEventHandlers() {\n      this._sharedElementCount++;\n      var eventHandler = this._eventHandler;\n      if (!eventHandler.isRegistered) {\n        eventHandler.isRegistered = true;\n        var eventPrefix = IS_ANDROID ? 'on' : 'top';\n        var lastProgressValue = -1;\n        eventHandler.onTransitionProgress = registerEventHandler(function (event) {\n          'worklet';\n\n          var progress = event.progress;\n          if (progress === lastProgressValue) {\n            return;\n          }\n          lastProgressValue = progress;\n          global.ProgressTransitionRegister.frame(progress);\n        }, eventPrefix + 'TransitionProgress');\n        eventHandler.onAppear = registerEventHandler(function () {\n          'worklet';\n\n          global.ProgressTransitionRegister.onTransitionEnd();\n        }, eventPrefix + 'Appear');\n        if (IS_ANDROID) {\n          eventHandler.onDisappear = registerEventHandler(function () {\n            'worklet';\n\n            global.ProgressTransitionRegister.onAndroidFinishTransitioning();\n          }, 'onFinishTransitioning');\n        } else if (Platform.OS === 'ios') {\n          eventHandler.onDisappear = registerEventHandler(function () {\n            'worklet';\n\n            global.ProgressTransitionRegister.onTransitionEnd(true);\n          }, 'topDisappear');\n          eventHandler.onSwipeDismiss = registerEventHandler(function () {\n            'worklet';\n\n            global.ProgressTransitionRegister.onTransitionEnd();\n          }, 'topGestureCancel');\n        }\n      }\n    }\n  }, {\n    key: \"unregisterEventHandlers\",\n    value: function unregisterEventHandlers() {\n      this._sharedElementCount--;\n      if (this._sharedElementCount === 0) {\n        var eventHandler = this._eventHandler;\n        eventHandler.isRegistered = false;\n        if (eventHandler.onTransitionProgress !== -1) {\n          unregisterEventHandler(eventHandler.onTransitionProgress);\n          eventHandler.onTransitionProgress = -1;\n        }\n        if (eventHandler.onAppear !== -1) {\n          unregisterEventHandler(eventHandler.onAppear);\n          eventHandler.onAppear = -1;\n        }\n        if (eventHandler.onDisappear !== -1) {\n          unregisterEventHandler(eventHandler.onDisappear);\n          eventHandler.onDisappear = -1;\n        }\n        if (eventHandler.onSwipeDismiss !== -1) {\n          unregisterEventHandler(eventHandler.onSwipeDismiss);\n          eventHandler.onSwipeDismiss = -1;\n        }\n      }\n    }\n  }]);\n}();\nfunction createProgressTransitionRegister() {\n  'worklet';\n\n  var progressAnimations = new Map();\n  var snapshots = new Map();\n  var currentTransitions = new Set();\n  var toRemove = new Set();\n  var skipCleaning = false;\n  var isTransitionRestart = false;\n  var progressTransitionManager = {\n    addProgressAnimation: function addProgressAnimation(viewTag, progressAnimation) {\n      if (currentTransitions.size > 0 && !progressAnimations.has(viewTag)) {\n        isTransitionRestart = !IS_ANDROID;\n      }\n      progressAnimations.set(viewTag, progressAnimation);\n    },\n    removeProgressAnimation: function removeProgressAnimation(viewTag, isUnmounting) {\n      if (currentTransitions.size > 0) {\n        isTransitionRestart = !IS_ANDROID;\n      }\n      if (isUnmounting) {\n        toRemove.add(viewTag);\n      } else {\n        progressAnimations.delete(viewTag);\n      }\n    },\n    onTransitionStart: function onTransitionStart(viewTag, snapshot) {\n      skipCleaning = isTransitionRestart;\n      snapshots.set(viewTag, snapshot);\n      currentTransitions.add(viewTag);\n      progressTransitionManager.frame(0);\n    },\n    frame: function frame(progress) {\n      for (var viewTag of currentTransitions) {\n        var progressAnimation = progressAnimations.get(viewTag);\n        if (!progressAnimation) {\n          continue;\n        }\n        var snapshot = snapshots.get(viewTag);\n        progressAnimation(viewTag, snapshot, progress);\n      }\n    },\n    onAndroidFinishTransitioning: function onAndroidFinishTransitioning() {\n      if (toRemove.size > 0) {\n        progressTransitionManager.onTransitionEnd();\n      }\n    },\n    onTransitionEnd: function onTransitionEnd() {\n      var removeViews = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (currentTransitions.size === 0) {\n        toRemove.clear();\n        return;\n      }\n      if (skipCleaning) {\n        skipCleaning = false;\n        isTransitionRestart = false;\n        return;\n      }\n      for (var viewTag of currentTransitions) {\n        global._notifyAboutEnd(viewTag, removeViews);\n      }\n      currentTransitions.clear();\n      if (isTransitionRestart) {\n        return;\n      }\n      snapshots.clear();\n      if (toRemove.size > 0) {\n        for (var _viewTag of toRemove) {\n          progressAnimations.delete(_viewTag);\n          global._notifyAboutEnd(_viewTag, removeViews);\n        }\n        toRemove.clear();\n      }\n    }\n  };\n  return progressTransitionManager;\n}\nif (shouldBeUseWeb()) {\n  var maybeThrowError = function maybeThrowError() {\n    if (!isJest()) {\n      throw new ReanimatedError('`ProgressTransitionRegister` is not available on non-native platform.');\n    }\n  };\n  global.ProgressTransitionRegister = new Proxy({}, {\n    get: maybeThrowError,\n    set: function set() {\n      maybeThrowError();\n      return false;\n    }\n  });\n} else {\n  runOnUIImmediately(function () {\n    'worklet';\n\n    global.ProgressTransitionRegister = createProgressTransitionRegister();\n  })();\n}","map":{"version":3,"names":["_classCallCheck","_createClass","runOnUIImmediately","registerEventHandler","unregisterEventHandler","Platform","isJest","shouldBeUseWeb","ReanimatedError","IS_ANDROID","OS","ProgressTransitionManager","_sharedElementCount","_eventHandler","isRegistered","onTransitionProgress","onAppear","onDisappear","onSwipeDismiss","key","value","addProgressAnimation","viewTag","progressAnimation","global","ProgressTransitionRegister","registerEventHandlers","removeProgressAnimation","isUnmounting","arguments","length","undefined","unregisterEventHandlers","eventHandler","eventPrefix","lastProgressValue","event","progress","frame","onTransitionEnd","onAndroidFinishTransitioning","createProgressTransitionRegister","progressAnimations","Map","snapshots","currentTransitions","Set","toRemove","skipCleaning","isTransitionRestart","progressTransitionManager","size","has","set","add","delete","onTransitionStart","snapshot","get","removeViews","clear","_notifyAboutEnd","maybeThrowError","Proxy"],"sources":["C:\\Proyek PAWM\\g-lingua-mobile\\node_modules\\react-native-reanimated\\src\\layoutReanimation\\sharedTransitions\\ProgressTransitionManager.ts"],"sourcesContent":["'use strict';\nimport { runOnUIImmediately } from '../../threads';\nimport type {\n  ProgressAnimation,\n  SharedTransitionAnimationsValues,\n} from '../animationBuilder/commonTypes';\nimport { registerEventHandler, unregisterEventHandler } from '../../core';\nimport { Platform } from 'react-native';\nimport { isJest, shouldBeUseWeb } from '../../PlatformChecker';\nimport { ReanimatedError } from '../../errors';\n\ntype TransitionProgressEvent = {\n  closing: number;\n  goingForward: number;\n  eventName: string;\n  progress: number;\n  target: number;\n};\n\nconst IS_ANDROID = Platform.OS === 'android';\n\nexport class ProgressTransitionManager {\n  private _sharedElementCount = 0;\n  private _eventHandler = {\n    isRegistered: false,\n    onTransitionProgress: -1,\n    onAppear: -1,\n    onDisappear: -1,\n    onSwipeDismiss: -1,\n  };\n\n  public addProgressAnimation(\n    viewTag: number,\n    progressAnimation: ProgressAnimation\n  ) {\n    runOnUIImmediately(() => {\n      'worklet';\n      global.ProgressTransitionRegister.addProgressAnimation(\n        viewTag,\n        progressAnimation\n      );\n    })();\n\n    this.registerEventHandlers();\n  }\n\n  public removeProgressAnimation(viewTag: number, isUnmounting = true) {\n    this.unregisterEventHandlers();\n    runOnUIImmediately(() => {\n      'worklet';\n      global.ProgressTransitionRegister.removeProgressAnimation(\n        viewTag,\n        isUnmounting\n      );\n    })();\n  }\n\n  private registerEventHandlers() {\n    this._sharedElementCount++;\n    const eventHandler = this._eventHandler;\n    if (!eventHandler.isRegistered) {\n      eventHandler.isRegistered = true;\n      const eventPrefix = IS_ANDROID ? 'on' : 'top';\n      let lastProgressValue = -1;\n      eventHandler.onTransitionProgress = registerEventHandler(\n        (event: TransitionProgressEvent) => {\n          'worklet';\n          const progress = event.progress;\n          if (progress === lastProgressValue) {\n            // During screen transition, handler receives two events with the same progress\n            // value for both screens, but for modals, there is only one event. To optimize\n            // performance and avoid unnecessary worklet calls, let's skip the second event.\n            return;\n          }\n          lastProgressValue = progress;\n          global.ProgressTransitionRegister.frame(progress);\n        },\n        eventPrefix + 'TransitionProgress'\n      );\n      eventHandler.onAppear = registerEventHandler(() => {\n        'worklet';\n        global.ProgressTransitionRegister.onTransitionEnd();\n      }, eventPrefix + 'Appear');\n\n      if (IS_ANDROID) {\n        // onFinishTransitioning event is available only on Android and\n        // is used to handle closing modals\n        eventHandler.onDisappear = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onAndroidFinishTransitioning();\n        }, 'onFinishTransitioning');\n      } else if (Platform.OS === 'ios') {\n        // topDisappear event is required to handle closing modals on iOS\n        eventHandler.onDisappear = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onTransitionEnd(true);\n        }, 'topDisappear');\n        eventHandler.onSwipeDismiss = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onTransitionEnd();\n        }, 'topGestureCancel');\n      }\n    }\n  }\n\n  private unregisterEventHandlers(): void {\n    this._sharedElementCount--;\n    if (this._sharedElementCount === 0) {\n      const eventHandler = this._eventHandler;\n      eventHandler.isRegistered = false;\n      if (eventHandler.onTransitionProgress !== -1) {\n        unregisterEventHandler(eventHandler.onTransitionProgress);\n        eventHandler.onTransitionProgress = -1;\n      }\n      if (eventHandler.onAppear !== -1) {\n        unregisterEventHandler(eventHandler.onAppear);\n        eventHandler.onAppear = -1;\n      }\n      if (eventHandler.onDisappear !== -1) {\n        unregisterEventHandler(eventHandler.onDisappear);\n        eventHandler.onDisappear = -1;\n      }\n      if (eventHandler.onSwipeDismiss !== -1) {\n        unregisterEventHandler(eventHandler.onSwipeDismiss);\n        eventHandler.onSwipeDismiss = -1;\n      }\n    }\n  }\n}\n\nfunction createProgressTransitionRegister() {\n  'worklet';\n  const progressAnimations = new Map<number, ProgressAnimation>();\n  const snapshots = new Map<\n    number,\n    Partial<SharedTransitionAnimationsValues>\n  >();\n  const currentTransitions = new Set<number>();\n  const toRemove = new Set<number>();\n\n  let skipCleaning = false;\n  let isTransitionRestart = false;\n\n  const progressTransitionManager = {\n    addProgressAnimation: (\n      viewTag: number,\n      progressAnimation: ProgressAnimation\n    ) => {\n      if (currentTransitions.size > 0 && !progressAnimations.has(viewTag)) {\n        // there is no need to prevent cleaning on android\n        isTransitionRestart = !IS_ANDROID;\n      }\n      progressAnimations.set(viewTag, progressAnimation);\n    },\n    removeProgressAnimation: (viewTag: number, isUnmounting: boolean) => {\n      if (currentTransitions.size > 0) {\n        // there is no need to prevent cleaning on android\n        isTransitionRestart = !IS_ANDROID;\n      }\n      if (isUnmounting) {\n        // Remove the animation config after the transition is finished\n        toRemove.add(viewTag);\n      } else {\n        // if the animation is removed, without ever being started, it can be removed immediately\n        progressAnimations.delete(viewTag);\n      }\n    },\n    onTransitionStart: (\n      viewTag: number,\n      snapshot: Partial<SharedTransitionAnimationsValues>\n    ) => {\n      skipCleaning = isTransitionRestart;\n      snapshots.set(viewTag, snapshot);\n      currentTransitions.add(viewTag);\n      // set initial style for re-parented components\n      progressTransitionManager.frame(0);\n    },\n    frame: (progress: number) => {\n      for (const viewTag of currentTransitions) {\n        const progressAnimation = progressAnimations.get(viewTag);\n        if (!progressAnimation) {\n          continue;\n        }\n        const snapshot = snapshots.get(\n          viewTag\n        )! as SharedTransitionAnimationsValues;\n        progressAnimation(viewTag, snapshot, progress);\n      }\n    },\n    onAndroidFinishTransitioning: () => {\n      if (toRemove.size > 0) {\n        // it should be ran only on modal closing\n        progressTransitionManager.onTransitionEnd();\n      }\n    },\n    onTransitionEnd: (removeViews = false) => {\n      if (currentTransitions.size === 0) {\n        toRemove.clear();\n        return;\n      }\n      if (skipCleaning) {\n        skipCleaning = false;\n        isTransitionRestart = false;\n        return;\n      }\n      for (const viewTag of currentTransitions) {\n        global._notifyAboutEnd(viewTag, removeViews);\n      }\n      currentTransitions.clear();\n      if (isTransitionRestart) {\n        // on transition restart, progressAnimations should be saved\n        // because they potentially can be used in the next transition\n        return;\n      }\n      snapshots.clear();\n      if (toRemove.size > 0) {\n        for (const viewTag of toRemove) {\n          progressAnimations.delete(viewTag);\n          global._notifyAboutEnd(viewTag, removeViews);\n        }\n        toRemove.clear();\n      }\n    },\n  };\n  return progressTransitionManager;\n}\n\nif (shouldBeUseWeb()) {\n  const maybeThrowError = () => {\n    // Jest attempts to access a property of this object to check if it is a Jest mock\n    // so we can't throw an error in the getter.\n    if (!isJest()) {\n      throw new ReanimatedError(\n        '`ProgressTransitionRegister` is not available on non-native platform.'\n      );\n    }\n  };\n  global.ProgressTransitionRegister = new Proxy(\n    {} as ProgressTransitionRegister,\n    {\n      get: maybeThrowError,\n      set: () => {\n        maybeThrowError();\n        return false;\n      },\n    }\n  );\n} else {\n  runOnUIImmediately(() => {\n    'worklet';\n    global.ProgressTransitionRegister = createProgressTransitionRegister();\n  })();\n}\n\nexport type ProgressTransitionRegister = ReturnType<\n  typeof createProgressTransitionRegister\n>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}