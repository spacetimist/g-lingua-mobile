{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Sensor from \"./Sensor.js\";\nexport var SensorContainer = function () {\n  function SensorContainer() {\n    _classCallCheck(this, SensorContainer);\n    this.nativeSensors = new Map();\n  }\n  return _createClass(SensorContainer, [{\n    key: \"getSensorId\",\n    value: function getSensorId(sensorType, config) {\n      return sensorType * 100 + config.iosReferenceFrame * 10 + Number(config.adjustToInterfaceOrientation);\n    }\n  }, {\n    key: \"initializeSensor\",\n    value: function initializeSensor(sensorType, config) {\n      var sensorId = this.getSensorId(sensorType, config);\n      if (!this.nativeSensors.has(sensorId)) {\n        var newSensor = new Sensor(sensorType, config);\n        this.nativeSensors.set(sensorId, newSensor);\n      }\n      var sensor = this.nativeSensors.get(sensorId);\n      return sensor.getSharedValue();\n    }\n  }, {\n    key: \"registerSensor\",\n    value: function registerSensor(sensorType, config, handler) {\n      var sensorId = this.getSensorId(sensorType, config);\n      if (!this.nativeSensors.has(sensorId)) {\n        return -1;\n      }\n      var sensor = this.nativeSensors.get(sensorId);\n      if (sensor && sensor.isAvailable() && (sensor.isRunning() || sensor.register(handler))) {\n        sensor.listenersNumber++;\n        return sensorId;\n      }\n      return -1;\n    }\n  }, {\n    key: \"unregisterSensor\",\n    value: function unregisterSensor(sensorId) {\n      if (this.nativeSensors.has(sensorId)) {\n        var sensor = this.nativeSensors.get(sensorId);\n        if (sensor && sensor.isRunning()) {\n          sensor.listenersNumber--;\n          if (sensor.listenersNumber === 0) {\n            sensor.unregister();\n          }\n        }\n      }\n    }\n  }]);\n}();","map":{"version":3,"names":["_classCallCheck","_createClass","Sensor","SensorContainer","nativeSensors","Map","key","value","getSensorId","sensorType","config","iosReferenceFrame","Number","adjustToInterfaceOrientation","initializeSensor","sensorId","has","newSensor","set","sensor","get","getSharedValue","registerSensor","handler","isAvailable","isRunning","register","listenersNumber","unregisterSensor","unregister"],"sources":["C:\\Proyek PAWM\\g-lingua-mobile\\node_modules\\react-native-reanimated\\src\\SensorContainer.ts"],"sourcesContent":["'use strict';\nimport type {\n  SensorType,\n  SensorConfig,\n  Value3D,\n  ValueRotation,\n  ShareableRef,\n  SharedValue,\n} from './commonTypes';\nimport Sensor from './Sensor';\n\nexport class SensorContainer {\n  private nativeSensors: Map<number, Sensor> = new Map();\n\n  getSensorId(sensorType: SensorType, config: SensorConfig) {\n    return (\n      sensorType * 100 +\n      config.iosReferenceFrame * 10 +\n      Number(config.adjustToInterfaceOrientation)\n    );\n  }\n\n  initializeSensor(\n    sensorType: SensorType,\n    config: SensorConfig\n  ): SharedValue<Value3D | ValueRotation> {\n    const sensorId = this.getSensorId(sensorType, config);\n\n    if (!this.nativeSensors.has(sensorId)) {\n      const newSensor = new Sensor(sensorType, config);\n      this.nativeSensors.set(sensorId, newSensor);\n    }\n\n    const sensor = this.nativeSensors.get(sensorId);\n    return sensor!.getSharedValue();\n  }\n\n  registerSensor(\n    sensorType: SensorType,\n    config: SensorConfig,\n    handler: ShareableRef<(data: Value3D | ValueRotation) => void>\n  ): number {\n    const sensorId = this.getSensorId(sensorType, config);\n\n    if (!this.nativeSensors.has(sensorId)) {\n      return -1;\n    }\n\n    const sensor = this.nativeSensors.get(sensorId);\n    if (\n      sensor &&\n      sensor.isAvailable() &&\n      (sensor.isRunning() || sensor.register(handler))\n    ) {\n      sensor.listenersNumber++;\n      return sensorId;\n    }\n    return -1;\n  }\n\n  unregisterSensor(sensorId: number) {\n    if (this.nativeSensors.has(sensorId)) {\n      const sensor = this.nativeSensors.get(sensorId);\n      if (sensor && sensor.isRunning()) {\n        sensor.listenersNumber--;\n        if (sensor.listenersNumber === 0) {\n          sensor.unregister();\n        }\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAAA,OAAAA,eAAA;AAAA,OAAAC,YAAA;AASZ,OAAOC,MAAM;AAEb,WAAaC,eAAe;EAAA,SAAAA,gBAAA;IAAAH,eAAA,OAAAG,eAAA;IAAA,KAClBC,aAAa,GAAwB,IAAIC,GAAG,CAAC,CAAC;EAAA;EAAA,OAAAJ,YAAA,CAAAE,eAAA;IAAAG,GAAA;IAAAC,KAAA,EAEtD,SAAAC,WAAWA,CAACC,UAAsB,EAAEC,MAAoB,EAAE;MACxD,OACED,UAAU,GAAG,GAAG,GAChBC,MAAM,CAACC,iBAAiB,GAAG,EAAE,GAC7BC,MAAM,CAACF,MAAM,CAACG,4BAA4B,CAAC;IAE/C;EAAA;IAAAP,GAAA;IAAAC,KAAA,EAEA,SAAAO,gBAAgBA,CACdL,UAAsB,EACtBC,MAAoB,EACkB;MACtC,IAAMK,QAAQ,GAAG,IAAI,CAACP,WAAW,CAACC,UAAU,EAAEC,MAAM,CAAC;MAErD,IAAI,CAAC,IAAI,CAACN,aAAa,CAACY,GAAG,CAACD,QAAQ,CAAC,EAAE;QACrC,IAAME,SAAS,GAAG,IAAIf,MAAM,CAACO,UAAU,EAAEC,MAAM,CAAC;QAChD,IAAI,CAACN,aAAa,CAACc,GAAG,CAACH,QAAQ,EAAEE,SAAS,CAAC;MAC7C;MAEA,IAAME,MAAM,GAAG,IAAI,CAACf,aAAa,CAACgB,GAAG,CAACL,QAAQ,CAAC;MAC/C,OAAOI,MAAM,CAAEE,cAAc,CAAC,CAAC;IACjC;EAAA;IAAAf,GAAA;IAAAC,KAAA,EAEA,SAAAe,cAAcA,CACZb,UAAsB,EACtBC,MAAoB,EACpBa,OAA8D,EACtD;MACR,IAAMR,QAAQ,GAAG,IAAI,CAACP,WAAW,CAACC,UAAU,EAAEC,MAAM,CAAC;MAErD,IAAI,CAAC,IAAI,CAACN,aAAa,CAACY,GAAG,CAACD,QAAQ,CAAC,EAAE;QACrC,OAAO,CAAC,CAAC;MACX;MAEA,IAAMI,MAAM,GAAG,IAAI,CAACf,aAAa,CAACgB,GAAG,CAACL,QAAQ,CAAC;MAC/C,IACEI,MAAM,IACNA,MAAM,CAACK,WAAW,CAAC,CAAC,KACnBL,MAAM,CAACM,SAAS,CAAC,CAAC,IAAIN,MAAM,CAACO,QAAQ,CAACH,OAAO,CAAC,CAAC,EAChD;QACAJ,MAAM,CAACQ,eAAe,EAAE;QACxB,OAAOZ,QAAQ;MACjB;MACA,OAAO,CAAC,CAAC;IACX;EAAA;IAAAT,GAAA;IAAAC,KAAA,EAEA,SAAAqB,gBAAgBA,CAACb,QAAgB,EAAE;MACjC,IAAI,IAAI,CAACX,aAAa,CAACY,GAAG,CAACD,QAAQ,CAAC,EAAE;QACpC,IAAMI,MAAM,GAAG,IAAI,CAACf,aAAa,CAACgB,GAAG,CAACL,QAAQ,CAAC;QAC/C,IAAII,MAAM,IAAIA,MAAM,CAACM,SAAS,CAAC,CAAC,EAAE;UAChCN,MAAM,CAACQ,eAAe,EAAE;UACxB,IAAIR,MAAM,CAACQ,eAAe,KAAK,CAAC,EAAE;YAChCR,MAAM,CAACU,UAAU,CAAC,CAAC;UACrB;QACF;MACF;IACF;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}