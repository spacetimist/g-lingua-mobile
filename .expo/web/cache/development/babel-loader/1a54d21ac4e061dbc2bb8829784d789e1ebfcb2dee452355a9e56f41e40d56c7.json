{"ast":null,"code":"'use strict';\n\nimport { makeMutable } from \"./core.js\";\nexport function makeViewDescriptorsSet() {\n  var shareableViewDescriptors = makeMutable([]);\n  var data = {\n    shareableViewDescriptors: shareableViewDescriptors,\n    add: function add(item) {\n      shareableViewDescriptors.modify(function (descriptors) {\n        'worklet';\n\n        var index = descriptors.findIndex(function (descriptor) {\n          return descriptor.tag === item.tag;\n        });\n        if (index !== -1) {\n          descriptors[index] = item;\n        } else {\n          descriptors.push(item);\n        }\n        return descriptors;\n      }, false);\n    },\n    remove: function remove(viewTag) {\n      shareableViewDescriptors.modify(function (descriptors) {\n        'worklet';\n\n        var index = descriptors.findIndex(function (descriptor) {\n          return descriptor.tag === viewTag;\n        });\n        if (index !== -1) {\n          descriptors.splice(index, 1);\n        }\n        return descriptors;\n      }, false);\n    }\n  };\n  return data;\n}","map":{"version":3,"names":["makeMutable","makeViewDescriptorsSet","shareableViewDescriptors","data","add","item","modify","descriptors","index","findIndex","descriptor","tag","push","remove","viewTag","splice"],"sources":["C:\\Proyek PAWM\\g-lingua-mobile\\node_modules\\react-native-reanimated\\src\\ViewDescriptorsSet.ts"],"sourcesContent":["'use strict';\nimport { makeMutable } from './core';\nimport type { SharedValue } from './commonTypes';\nimport type { Descriptor } from './hook/commonTypes';\n\nexport interface ViewDescriptorsSet {\n  shareableViewDescriptors: SharedValue<Descriptor[]>;\n  add: (item: Descriptor) => void;\n  remove: (viewTag: number) => void;\n}\n\nexport function makeViewDescriptorsSet(): ViewDescriptorsSet {\n  const shareableViewDescriptors = makeMutable<Descriptor[]>([]);\n  const data: ViewDescriptorsSet = {\n    shareableViewDescriptors,\n    add: (item: Descriptor) => {\n      shareableViewDescriptors.modify((descriptors) => {\n        'worklet';\n        const index = descriptors.findIndex(\n          (descriptor) => descriptor.tag === item.tag\n        );\n        if (index !== -1) {\n          descriptors[index] = item;\n        } else {\n          descriptors.push(item);\n        }\n        return descriptors;\n      }, false);\n    },\n\n    remove: (viewTag: number) => {\n      shareableViewDescriptors.modify((descriptors) => {\n        'worklet';\n        const index = descriptors.findIndex(\n          (descriptor) => descriptor.tag === viewTag\n        );\n        if (index !== -1) {\n          descriptors.splice(index, 1);\n        }\n        return descriptors;\n      }, false);\n    },\n  };\n  return data;\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,WAAW;AAUpB,OAAO,SAASC,sBAAsBA,CAAA,EAAuB;EAC3D,IAAMC,wBAAwB,GAAGF,WAAW,CAAe,EAAE,CAAC;EAC9D,IAAMG,IAAwB,GAAG;IAC/BD,wBAAwB,EAAxBA,wBAAwB;IACxBE,GAAG,EAAG,SAANA,GAAGA,CAAGC,IAAgB,EAAK;MACzBH,wBAAwB,CAACI,MAAM,CAAE,UAAAC,WAAW,EAAK;QAC/C,SAAS;;QACT,IAAMC,KAAK,GAAGD,WAAW,CAACE,SAAS,CAChC,UAAAC,UAAU;UAAA,OAAKA,UAAU,CAACC,GAAG,KAAKN,IAAI,CAACM,GAC1C;QAAA,EAAC;QACD,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;UAChBD,WAAW,CAACC,KAAK,CAAC,GAAGH,IAAI;QAC3B,CAAC,MAAM;UACLE,WAAW,CAACK,IAAI,CAACP,IAAI,CAAC;QACxB;QACA,OAAOE,WAAW;MACpB,CAAC,EAAE,KAAK,CAAC;IACX,CAAC;IAEDM,MAAM,EAAG,SAATA,MAAMA,CAAGC,OAAe,EAAK;MAC3BZ,wBAAwB,CAACI,MAAM,CAAE,UAAAC,WAAW,EAAK;QAC/C,SAAS;;QACT,IAAMC,KAAK,GAAGD,WAAW,CAACE,SAAS,CAChC,UAAAC,UAAU;UAAA,OAAKA,UAAU,CAACC,GAAG,KAAKG,OACrC;QAAA,EAAC;QACD,IAAIN,KAAK,KAAK,CAAC,CAAC,EAAE;UAChBD,WAAW,CAACQ,MAAM,CAACP,KAAK,EAAE,CAAC,CAAC;QAC9B;QACA,OAAOD,WAAW;MACpB,CAAC,EAAE,KAAK,CAAC;IACX;EACF,CAAC;EACD,OAAOJ,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}